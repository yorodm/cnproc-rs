/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, unused)]use libc::*;

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const CN_IDX_PROC: u32 = 1;
pub const CN_VAL_PROC: u32 = 1;
pub const CN_IDX_CIFS: u32 = 2;
pub const CN_VAL_CIFS: u32 = 1;
pub const CN_W1_IDX: u32 = 3;
pub const CN_W1_VAL: u32 = 1;
pub const CN_IDX_V86D: u32 = 4;
pub const CN_VAL_V86D_UVESAFB: u32 = 1;
pub const CN_IDX_BB: u32 = 5;
pub const CN_DST_IDX: u32 = 6;
pub const CN_DST_VAL: u32 = 1;
pub const CN_IDX_DM: u32 = 7;
pub const CN_VAL_DM_USERSPACE_LOG: u32 = 1;
pub const CN_IDX_DRBD: u32 = 8;
pub const CN_VAL_DRBD: u32 = 1;
pub const CN_KVP_IDX: u32 = 9;
pub const CN_KVP_VAL: u32 = 1;
pub const CN_VSS_IDX: u32 = 10;
pub const CN_VSS_VAL: u32 = 1;
pub const CN_NETLINK_USERS: u32 = 11;
pub const CONNECTOR_MAX_MSG_SIZE: u32 = 16384;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const SOCK_SNDBUF_LOCK: u32 = 1;
pub const SOCK_RCVBUF_LOCK: u32 = 2;
pub const SOCK_BUF_LOCK_MASK: u32 = 3;
pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const SOCK_TXREHASH_DISABLED: u32 = 0;
pub const SOCK_TXREHASH_ENABLED: u32 = 1;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_BULK: u32 = 512;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NETLINK_GET_STRICT_CHK: u32 = 12;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub type __s8 = libc::c_schar;
pub type __u8 = libc::c_uchar;
pub type __s16 = libc::c_short;
pub type __u16 = libc::c_ushort;
pub type __s32 = libc::c_int;
pub type __u32 = libc::c_uint;
pub type __s64 = libc::c_longlong;
pub type __u64 = libc::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [libc::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::core::mem::size_of::<__kernel_fd_set>() - 128usize];
    [
        "Alignment of __kernel_fd_set",
    ][::core::mem::align_of::<__kernel_fd_set>() - 8usize];
    [
        "Offset of field: __kernel_fd_set::fds_bits",
    ][::core::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: libc::c_int),
>;
pub type __kernel_key_t = libc::c_int;
pub type __kernel_mqd_t = libc::c_int;
pub type __kernel_old_uid_t = libc::c_ushort;
pub type __kernel_old_gid_t = libc::c_ushort;
pub type __kernel_old_dev_t = libc::c_ulong;
pub type __kernel_long_t = libc::c_long;
pub type __kernel_ulong_t = libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = libc::c_uint;
pub type __kernel_pid_t = libc::c_int;
pub type __kernel_ipc_pid_t = libc::c_int;
pub type __kernel_uid_t = libc::c_uint;
pub type __kernel_gid_t = libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = libc::c_int;
pub type __kernel_uid32_t = libc::c_uint;
pub type __kernel_gid32_t = libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [libc::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::core::mem::size_of::<__kernel_fsid_t>() - 8usize];
    [
        "Alignment of __kernel_fsid_t",
    ][::core::mem::align_of::<__kernel_fsid_t>() - 4usize];
    [
        "Offset of field: __kernel_fsid_t::val",
    ][::core::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = libc::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = libc::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = libc::c_int;
pub type __kernel_clockid_t = libc::c_int;
pub type __kernel_caddr_t = *mut libc::c_char;
pub type __kernel_uid16_t = libc::c_ushort;
pub type __kernel_gid16_t = libc::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cb_id {
    pub idx: __u32,
    pub val: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cb_id"][::core::mem::size_of::<cb_id>() - 8usize];
    ["Alignment of cb_id"][::core::mem::align_of::<cb_id>() - 4usize];
    ["Offset of field: cb_id::idx"][::core::mem::offset_of!(cb_id, idx) - 0usize];
    ["Offset of field: cb_id::val"][::core::mem::offset_of!(cb_id, val) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cn_msg {
    pub id: cb_id,
    pub seq: __u32,
    pub ack: __u32,
    pub len: __u16,
    pub flags: __u16,
    pub data: __IncompleteArrayField<__u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cn_msg"][::core::mem::size_of::<cn_msg>() - 20usize];
    ["Alignment of cn_msg"][::core::mem::align_of::<cn_msg>() - 4usize];
    ["Offset of field: cn_msg::id"][::core::mem::offset_of!(cn_msg, id) - 0usize];
    ["Offset of field: cn_msg::seq"][::core::mem::offset_of!(cn_msg, seq) - 8usize];
    ["Offset of field: cn_msg::ack"][::core::mem::offset_of!(cn_msg, ack) - 12usize];
    ["Offset of field: cn_msg::len"][::core::mem::offset_of!(cn_msg, len) - 16usize];
    ["Offset of field: cn_msg::flags"][::core::mem::offset_of!(cn_msg, flags) - 18usize];
    ["Offset of field: cn_msg::data"][::core::mem::offset_of!(cn_msg, data) - 20usize];
};
pub type __kernel_sa_family_t = libc::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [libc::c_char; 126usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1",
    ][::core::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()
        - 128usize];
    [
        "Alignment of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1",
    ][::core::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()
        - 2usize];
    [
        "Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::ss_family",
    ][::core::mem::offset_of!(
        __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1, ss_family
    ) - 0usize];
    [
        "Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::__data",
    ][::core::mem::offset_of!(
        __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1, __data
    ) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of __kernel_sockaddr_storage__bindgen_ty_1",
    ][::core::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 128usize];
    [
        "Alignment of __kernel_sockaddr_storage__bindgen_ty_1",
    ][::core::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 8usize];
    [
        "Offset of field: __kernel_sockaddr_storage__bindgen_ty_1::__align",
    ][::core::mem::offset_of!(__kernel_sockaddr_storage__bindgen_ty_1, __align)
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of __kernel_sockaddr_storage",
    ][::core::mem::size_of::<__kernel_sockaddr_storage>() - 128usize];
    [
        "Alignment of __kernel_sockaddr_storage",
    ][::core::mem::align_of::<__kernel_sockaddr_storage>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: libc::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_nl"][::core::mem::size_of::<sockaddr_nl>() - 12usize];
    ["Alignment of sockaddr_nl"][::core::mem::align_of::<sockaddr_nl>() - 4usize];
    [
        "Offset of field: sockaddr_nl::nl_family",
    ][::core::mem::offset_of!(sockaddr_nl, nl_family) - 0usize];
    [
        "Offset of field: sockaddr_nl::nl_pad",
    ][::core::mem::offset_of!(sockaddr_nl, nl_pad) - 2usize];
    [
        "Offset of field: sockaddr_nl::nl_pid",
    ][::core::mem::offset_of!(sockaddr_nl, nl_pid) - 4usize];
    [
        "Offset of field: sockaddr_nl::nl_groups",
    ][::core::mem::offset_of!(sockaddr_nl, nl_groups) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlmsghdr"][::core::mem::size_of::<nlmsghdr>() - 16usize];
    ["Alignment of nlmsghdr"][::core::mem::align_of::<nlmsghdr>() - 4usize];
    [
        "Offset of field: nlmsghdr::nlmsg_len",
    ][::core::mem::offset_of!(nlmsghdr, nlmsg_len) - 0usize];
    [
        "Offset of field: nlmsghdr::nlmsg_type",
    ][::core::mem::offset_of!(nlmsghdr, nlmsg_type) - 4usize];
    [
        "Offset of field: nlmsghdr::nlmsg_flags",
    ][::core::mem::offset_of!(nlmsghdr, nlmsg_flags) - 6usize];
    [
        "Offset of field: nlmsghdr::nlmsg_seq",
    ][::core::mem::offset_of!(nlmsghdr, nlmsg_seq) - 8usize];
    [
        "Offset of field: nlmsghdr::nlmsg_pid",
    ][::core::mem::offset_of!(nlmsghdr, nlmsg_pid) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsgerr {
    pub error: libc::c_int,
    pub msg: nlmsghdr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlmsgerr"][::core::mem::size_of::<nlmsgerr>() - 20usize];
    ["Alignment of nlmsgerr"][::core::mem::align_of::<nlmsgerr>() - 4usize];
    [
        "Offset of field: nlmsgerr::error",
    ][::core::mem::offset_of!(nlmsgerr, error) - 0usize];
    ["Offset of field: nlmsgerr::msg"][::core::mem::offset_of!(nlmsgerr, msg) - 4usize];
};
pub const NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const NLMSGERR_ATTR_POLICY: nlmsgerr_attrs = 4;
pub const NLMSGERR_ATTR_MISS_TYPE: nlmsgerr_attrs = 5;
pub const NLMSGERR_ATTR_MISS_NEST: nlmsgerr_attrs = 6;
pub const __NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 7;
pub const NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 6;
pub type nlmsgerr_attrs = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nl_pktinfo"][::core::mem::size_of::<nl_pktinfo>() - 4usize];
    ["Alignment of nl_pktinfo"][::core::mem::align_of::<nl_pktinfo>() - 4usize];
    [
        "Offset of field: nl_pktinfo::group",
    ][::core::mem::offset_of!(nl_pktinfo, group) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_req {
    pub nm_block_size: libc::c_uint,
    pub nm_block_nr: libc::c_uint,
    pub nm_frame_size: libc::c_uint,
    pub nm_frame_nr: libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nl_mmap_req"][::core::mem::size_of::<nl_mmap_req>() - 16usize];
    ["Alignment of nl_mmap_req"][::core::mem::align_of::<nl_mmap_req>() - 4usize];
    [
        "Offset of field: nl_mmap_req::nm_block_size",
    ][::core::mem::offset_of!(nl_mmap_req, nm_block_size) - 0usize];
    [
        "Offset of field: nl_mmap_req::nm_block_nr",
    ][::core::mem::offset_of!(nl_mmap_req, nm_block_nr) - 4usize];
    [
        "Offset of field: nl_mmap_req::nm_frame_size",
    ][::core::mem::offset_of!(nl_mmap_req, nm_frame_size) - 8usize];
    [
        "Offset of field: nl_mmap_req::nm_frame_nr",
    ][::core::mem::offset_of!(nl_mmap_req, nm_frame_nr) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_hdr {
    pub nm_status: libc::c_uint,
    pub nm_len: libc::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nl_mmap_hdr"][::core::mem::size_of::<nl_mmap_hdr>() - 24usize];
    ["Alignment of nl_mmap_hdr"][::core::mem::align_of::<nl_mmap_hdr>() - 4usize];
    [
        "Offset of field: nl_mmap_hdr::nm_status",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_status) - 0usize];
    [
        "Offset of field: nl_mmap_hdr::nm_len",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_len) - 4usize];
    [
        "Offset of field: nl_mmap_hdr::nm_group",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_group) - 8usize];
    [
        "Offset of field: nl_mmap_hdr::nm_pid",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_pid) - 12usize];
    [
        "Offset of field: nl_mmap_hdr::nm_uid",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_uid) - 16usize];
    [
        "Offset of field: nl_mmap_hdr::nm_gid",
    ][::core::mem::offset_of!(nl_mmap_hdr, nm_gid) - 20usize];
};
pub const NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = libc::c_uint;
pub const NETLINK_UNCONNECTED: _bindgen_ty_1 = 0;
pub const NETLINK_CONNECTED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlattr"][::core::mem::size_of::<nlattr>() - 4usize];
    ["Alignment of nlattr"][::core::mem::align_of::<nlattr>() - 2usize];
    [
        "Offset of field: nlattr::nla_len",
    ][::core::mem::offset_of!(nlattr, nla_len) - 0usize];
    [
        "Offset of field: nlattr::nla_type",
    ][::core::mem::offset_of!(nlattr, nla_type) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nla_bitfield32"][::core::mem::size_of::<nla_bitfield32>() - 8usize];
    ["Alignment of nla_bitfield32"][::core::mem::align_of::<nla_bitfield32>() - 4usize];
    [
        "Offset of field: nla_bitfield32::value",
    ][::core::mem::offset_of!(nla_bitfield32, value) - 0usize];
    [
        "Offset of field: nla_bitfield32::selector",
    ][::core::mem::offset_of!(nla_bitfield32, selector) - 4usize];
};
pub const NL_ATTR_TYPE_INVALID: netlink_attribute_type = 0;
pub const NL_ATTR_TYPE_FLAG: netlink_attribute_type = 1;
pub const NL_ATTR_TYPE_U8: netlink_attribute_type = 2;
pub const NL_ATTR_TYPE_U16: netlink_attribute_type = 3;
pub const NL_ATTR_TYPE_U32: netlink_attribute_type = 4;
pub const NL_ATTR_TYPE_U64: netlink_attribute_type = 5;
pub const NL_ATTR_TYPE_S8: netlink_attribute_type = 6;
pub const NL_ATTR_TYPE_S16: netlink_attribute_type = 7;
pub const NL_ATTR_TYPE_S32: netlink_attribute_type = 8;
pub const NL_ATTR_TYPE_S64: netlink_attribute_type = 9;
pub const NL_ATTR_TYPE_BINARY: netlink_attribute_type = 10;
pub const NL_ATTR_TYPE_STRING: netlink_attribute_type = 11;
pub const NL_ATTR_TYPE_NUL_STRING: netlink_attribute_type = 12;
pub const NL_ATTR_TYPE_NESTED: netlink_attribute_type = 13;
pub const NL_ATTR_TYPE_NESTED_ARRAY: netlink_attribute_type = 14;
pub const NL_ATTR_TYPE_BITFIELD32: netlink_attribute_type = 15;
pub const NL_ATTR_TYPE_SINT: netlink_attribute_type = 16;
pub const NL_ATTR_TYPE_UINT: netlink_attribute_type = 17;
pub type netlink_attribute_type = libc::c_uint;
pub const NL_POLICY_TYPE_ATTR_UNSPEC: netlink_policy_type_attr = 0;
pub const NL_POLICY_TYPE_ATTR_TYPE: netlink_policy_type_attr = 1;
pub const NL_POLICY_TYPE_ATTR_MIN_VALUE_S: netlink_policy_type_attr = 2;
pub const NL_POLICY_TYPE_ATTR_MAX_VALUE_S: netlink_policy_type_attr = 3;
pub const NL_POLICY_TYPE_ATTR_MIN_VALUE_U: netlink_policy_type_attr = 4;
pub const NL_POLICY_TYPE_ATTR_MAX_VALUE_U: netlink_policy_type_attr = 5;
pub const NL_POLICY_TYPE_ATTR_MIN_LENGTH: netlink_policy_type_attr = 6;
pub const NL_POLICY_TYPE_ATTR_MAX_LENGTH: netlink_policy_type_attr = 7;
pub const NL_POLICY_TYPE_ATTR_POLICY_IDX: netlink_policy_type_attr = 8;
pub const NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE: netlink_policy_type_attr = 9;
pub const NL_POLICY_TYPE_ATTR_BITFIELD32_MASK: netlink_policy_type_attr = 10;
pub const NL_POLICY_TYPE_ATTR_PAD: netlink_policy_type_attr = 11;
pub const NL_POLICY_TYPE_ATTR_MASK: netlink_policy_type_attr = 12;
pub const __NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 13;
pub const NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 12;
pub type netlink_policy_type_attr = libc::c_uint;
pub const PROC_CN_MCAST_LISTEN: proc_cn_mcast_op = 1;
pub const PROC_CN_MCAST_IGNORE: proc_cn_mcast_op = 2;
pub type proc_cn_mcast_op = libc::c_uint;
pub const PROC_EVENT_NONE: proc_cn_event = 0;
pub const PROC_EVENT_FORK: proc_cn_event = 1;
pub const PROC_EVENT_EXEC: proc_cn_event = 2;
pub const PROC_EVENT_UID: proc_cn_event = 4;
pub const PROC_EVENT_GID: proc_cn_event = 64;
pub const PROC_EVENT_SID: proc_cn_event = 128;
pub const PROC_EVENT_PTRACE: proc_cn_event = 256;
pub const PROC_EVENT_COMM: proc_cn_event = 512;
pub const PROC_EVENT_NONZERO_EXIT: proc_cn_event = 536870912;
pub const PROC_EVENT_COREDUMP: proc_cn_event = 1073741824;
pub const PROC_EVENT_EXIT: proc_cn_event = 2147483648;
pub type proc_cn_event = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_input {
    pub mcast_op: proc_cn_mcast_op,
    pub event_type: proc_cn_event,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_input"][::core::mem::size_of::<proc_input>() - 8usize];
    ["Alignment of proc_input"][::core::mem::align_of::<proc_input>() - 4usize];
    [
        "Offset of field: proc_input::mcast_op",
    ][::core::mem::offset_of!(proc_input, mcast_op) - 0usize];
    [
        "Offset of field: proc_input::event_type",
    ][::core::mem::offset_of!(proc_input, event_type) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proc_event {
    pub what: proc_cn_event,
    pub cpu: __u32,
    pub timestamp_ns: __u64,
    pub event_data: proc_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union proc_event__bindgen_ty_1 {
    pub ack: proc_event__bindgen_ty_1__bindgen_ty_1,
    pub fork: proc_event__bindgen_ty_1_fork_proc_event,
    pub exec: proc_event__bindgen_ty_1_exec_proc_event,
    pub id: proc_event__bindgen_ty_1_id_proc_event,
    pub sid: proc_event__bindgen_ty_1_sid_proc_event,
    pub ptrace: proc_event__bindgen_ty_1_ptrace_proc_event,
    pub comm: proc_event__bindgen_ty_1_comm_proc_event,
    pub coredump: proc_event__bindgen_ty_1_coredump_proc_event,
    pub exit: proc_event__bindgen_ty_1_exit_proc_event,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1__bindgen_ty_1 {
    pub err: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1__bindgen_ty_1",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    [
        "Alignment of proc_event__bindgen_ty_1__bindgen_ty_1",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1__bindgen_ty_1::err",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1__bindgen_ty_1, err) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_fork_proc_event {
    pub parent_pid: __kernel_pid_t,
    pub parent_tgid: __kernel_pid_t,
    pub child_pid: __kernel_pid_t,
    pub child_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_fork_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_fork_proc_event>() - 16usize];
    [
        "Alignment of proc_event__bindgen_ty_1_fork_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_fork_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_fork_proc_event::parent_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_fork_proc_event, parent_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_fork_proc_event::parent_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_fork_proc_event, parent_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_fork_proc_event::child_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_fork_proc_event, child_pid)
        - 8usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_fork_proc_event::child_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_fork_proc_event, child_tgid)
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_exec_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_exec_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_exec_proc_event>() - 8usize];
    [
        "Alignment of proc_event__bindgen_ty_1_exec_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_exec_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exec_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exec_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exec_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exec_proc_event, process_tgid)
        - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proc_event__bindgen_ty_1_id_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
    pub r: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1,
    pub e: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1 {
    pub ruid: __u32,
    pub rgid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1>()
        - 4usize];
    [
        "Alignment of proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1>()
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1::ruid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1, ruid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1::rgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_1, rgid)
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2 {
    pub euid: __u32,
    pub egid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2>()
        - 4usize];
    [
        "Alignment of proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2>()
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2::euid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2, euid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2::egid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event__bindgen_ty_2, egid)
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_id_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_id_proc_event>() - 16usize];
    [
        "Alignment of proc_event__bindgen_ty_1_id_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_id_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event, process_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event::r",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event, r) - 8usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_id_proc_event::e",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_id_proc_event, e) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_sid_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_sid_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_sid_proc_event>() - 8usize];
    [
        "Alignment of proc_event__bindgen_ty_1_sid_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_sid_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_sid_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_sid_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_sid_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_sid_proc_event, process_tgid)
        - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_ptrace_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
    pub tracer_pid: __kernel_pid_t,
    pub tracer_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_ptrace_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_ptrace_proc_event>() - 16usize];
    [
        "Alignment of proc_event__bindgen_ty_1_ptrace_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_ptrace_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_ptrace_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_ptrace_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_ptrace_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_ptrace_proc_event, process_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_ptrace_proc_event::tracer_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_ptrace_proc_event, tracer_pid)
        - 8usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_ptrace_proc_event::tracer_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_ptrace_proc_event, tracer_tgid)
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_comm_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
    pub comm: [libc::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_comm_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_comm_proc_event>() - 24usize];
    [
        "Alignment of proc_event__bindgen_ty_1_comm_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_comm_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_comm_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_comm_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_comm_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_comm_proc_event, process_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_comm_proc_event::comm",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_comm_proc_event, comm) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_coredump_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
    pub parent_pid: __kernel_pid_t,
    pub parent_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_coredump_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_coredump_proc_event>() - 16usize];
    [
        "Alignment of proc_event__bindgen_ty_1_coredump_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_coredump_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_coredump_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_coredump_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_coredump_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_coredump_proc_event, process_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_coredump_proc_event::parent_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_coredump_proc_event, parent_pid)
        - 8usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_coredump_proc_event::parent_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_coredump_proc_event, parent_tgid)
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_event__bindgen_ty_1_exit_proc_event {
    pub process_pid: __kernel_pid_t,
    pub process_tgid: __kernel_pid_t,
    pub exit_code: __u32,
    pub exit_signal: __u32,
    pub parent_pid: __kernel_pid_t,
    pub parent_tgid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1_exit_proc_event",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1_exit_proc_event>() - 24usize];
    [
        "Alignment of proc_event__bindgen_ty_1_exit_proc_event",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1_exit_proc_event>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::process_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, process_pid)
        - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::process_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, process_tgid)
        - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::exit_code",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, exit_code)
        - 8usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::exit_signal",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, exit_signal)
        - 12usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::parent_pid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, parent_pid)
        - 16usize];
    [
        "Offset of field: proc_event__bindgen_ty_1_exit_proc_event::parent_tgid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1_exit_proc_event, parent_tgid)
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of proc_event__bindgen_ty_1",
    ][::core::mem::size_of::<proc_event__bindgen_ty_1>() - 24usize];
    [
        "Alignment of proc_event__bindgen_ty_1",
    ][::core::mem::align_of::<proc_event__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::ack",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, ack) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::fork",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, fork) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::exec",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, exec) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::id",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, id) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::sid",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, sid) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::ptrace",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, ptrace) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::comm",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, comm) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::coredump",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, coredump) - 0usize];
    [
        "Offset of field: proc_event__bindgen_ty_1::exit",
    ][::core::mem::offset_of!(proc_event__bindgen_ty_1, exit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_event"][::core::mem::size_of::<proc_event>() - 40usize];
    ["Alignment of proc_event"][::core::mem::align_of::<proc_event>() - 8usize];
    [
        "Offset of field: proc_event::what",
    ][::core::mem::offset_of!(proc_event, what) - 0usize];
    [
        "Offset of field: proc_event::cpu",
    ][::core::mem::offset_of!(proc_event, cpu) - 4usize];
    [
        "Offset of field: proc_event::timestamp_ns",
    ][::core::mem::offset_of!(proc_event, timestamp_ns) - 8usize];
    [
        "Offset of field: proc_event::event_data",
    ][::core::mem::offset_of!(proc_event, event_data) - 16usize];
};
